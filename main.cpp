// Include standard headers
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Include GLEW
#include <GL/glew.h>

// Include GLFW
#include <GLFW/glfw3.h>
GLFWwindow* window;

// GLM header file
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
using namespace glm;

// shaders header file
#include "shader.cpp"
#include "text2D.cpp"

// Vertex array object (VAO)
GLuint VertexArrayID;

// TABULEIRO 
GLuint vertexbuffer;                //(VBO)
GLuint colorbuffer;                 //(CBO)
// next piece 
GLuint piece_vertexbuffer;          //(VBO)
GLuint piece_colorbuffer;           //(CBO)
// MENU
GLuint menu_vertexbuffer;           //(VBO)
GLuint menu_colorbuffer;            //(CBO)
// MENU SELECT
GLuint menuSelect_vertexbuffer;     //(VBO)
GLuint menuSelect_colorbuffer;      //(CBO)
// MENU SELECT
GLuint numbers_vertexbuffer;        //(VBO)
GLuint numbers_colorbuffer;         //(CBO)

// GLSL program from the shaders
GLuint programID;

GLint WindowWidth = 800;
GLint WindowHeight = 800;

GLuint MatrixID;

glm::mat4 pieceMVP;
glm::mat4 tabuleiroMVP;

glm::mat4 pieceModel = glm::mat4(1.0f);
glm::mat4 tabuleiroModel = glm::mat4(1.0f);

int selectOption = 0;
int points = 0;

bool startGame = false;
bool holdPiece = false;
bool menu = true;
bool continueGame = true;
bool tabuleiro[20][10]={
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};
time_t startTime;


int currentID=-1, currentROT=-1;
int holdID =-1, holdROT =-1;
int nextID =-1, nextROT =-1;
float pieceStep = 1.0f; 
float pieceMX = -5.0f; 
float pieceMY = 0.0f;
//--------------------------------------------------------------------------------
void transferDataToGPUMemory(void)
{
    // VAO
    glGenVertexArrays(1, &VertexArrayID);
    glBindVertexArray(VertexArrayID);

    initText2D("Holstein.DDS"); 
    
    // Create and compile our GLSL program from the shaders
    programID = LoadShaders( "SimpleVertexShader.vertexshader", "SimpleFragmentShader.fragmentshader" );
    
    // TABULEIRO
    static const GLfloat g_vertex_buffer_data[] = {
        
        //tabuleiro
        -11.0f, 11.0f, 0.0f, -11.0f, -11.0f, 0.0f, -10.0f, 11.0f, 0.0f, -10.0f, -11.0f, 0.0f, //esquerda
        0.0f, 11.0f, 0.0f, 0.0f, -11.0f, 0.0f, 1.0f, 11.0f, 0.0f, 1.0f, -11.0f, 0.0f, //direita
        -10.0f, 11.0f, 0.0f, -10.0f, 10.0f, 0.0f, 0.0f, 11.0f, 0.0f, 0.0f, 10.0f, 0.0f, //cima
        -10.0f, -10.0f, 0.0f, -10.0f, -11.0f, 0.0f, 0.0f, -10.0f, 0.0f, 0.0f, -11.0f, 0.0f, //baixo
        -10.0f, 10.0f, 0.0f, -10.0f, -10.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, -10.0f, 0.0f, //background

        //new_pieces
        4.0f, 4.0f, 0.0f, 4.0f, 11.0f, 0.0f, 13.0f, 11.0f, 0.0f, 13.0f, 4.0f, 0.0f, 

        //square 24
        0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, -1.0f, 0.0f,

        // line 30
        0.1f, -0.1f, 0.0f, 0.1f, -0.9f, 0.0f, 0.9f, -0.9f, 0.0f, 0.9f, -0.1f, 0.0f,

        //old_pieces 34
        4.0f, -5.0f, 0.0f, 4.0f, 2.0f, 0.0f, 13.0f, 2.0f, 0.0f, 13.0f, -5.0f, 0.0f, 

        //HOLD - 38
        4.0f, 3.0f, 0.0f, 4.0f, 2.1f, 0.0f, 4.0f, 2.55f, 0.0f, 4.5f, 2.55f, 0.0f, 4.5f, 3.0f, 0.0f, 4.5f, 2.1f, 0.0f,       // H
        4.75f, 3.0f, 0.0f, 4.75f, 2.1f, 0.0f, 5.25f, 2.1f, 0.0f, 5.25f, 3.0f, 0.0f,                                         // O
        5.5f, 3.0f, 0.0f, 5.5f, 2.1f, 0.0f, 6.0f, 2.1f, 0.0f,                                                               // L
        6.25f, 3.0f, 0.0f, 6.6f, 3.0f, 0.0f, 6.75f, 2.78f, 0.0f, 6.75f, 2.23f, 0.0f, 6.6f, 2.1, 0.0f, 6.25f, 2.1f, 0.0f,    // D

        //NEXT - 57
        4.0f, 11.1f, 0.0f, 4.0f, 12.0f, 0.0f, 4.5f, 11.1f, 0.0f, 4.5f, 12.0f, 0.0f,                                                                     // N
        5.25f, 12.0f, 0.0f, 4.75f, 12.0f, 0.0f, 4.75f, 11.55f, 0.0f, 5.0f, 11.55f, 0.0f, 4.75f, 11.55f, 0.0f, 4.75f, 11.1f, 0.0f, 5.25f, 11.1f, 0.0f,   // E    
        5.5f, 12.0f, 0.0f, 6.0f, 11.1f, 0.0f, 5.75f, 11.55f, 0.0f, 5.5f, 11.1f, 0.0f, 6.0f, 12.0f, 0.0f,                                                // X
        6.25f, 12.0f, 0.0f, 6.75f, 12.0f, 0.0f, 6.5f, 12.0f, 0.0f, 6.5f, 11.1f, 0.0f,                                                                   // T

    };
    
    static const GLfloat g_color_buffer_data[] = {
        //tabuleiro
        0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, //esquerda
        0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, //direita
        0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, //cima
        0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, //baixo
        0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, //background

        //new_pieces
        0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 

        //square 25
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,

        // line
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,

        //hold_pieces
        0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, //esquerda

        //HOLD - 38
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,         // H
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,                                             // O
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,                                                               // L
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,         // D

        //NEXT - 57
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,                                                         // N
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,   // E    
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,                                       // X
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,                                                         // T
    };

    // PIECES
    static const GLfloat piece_vertex_buffer_data[7][4][4*6*3] = {
        // I - 0 || 24 || 48 || 72 
        {   
            //0
            {
                -2.0f, 10.0f, 0.0f, -2.0f, 9.0f, 0.0f, -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, -2.0f, 9.0f, 0.0f, -1.0f, 10.0f, 0.0f,    //1º
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f,       //2º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f,          //3º
                1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f, 2.0f, 10.0f, 0.0f, 2.0f, 9.0f, 0.0f, 1.0f, 9.0f, 0.0f, 2.0f, 10.0f, 0.0f,          //4º
            },
            //90
            {
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f,  //1º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f,     //2º
                0.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f,     //3º
                0.0f, 7.0f, 0.0f, 0.0f, 6.0f, 0.0f, 1.0f, 7.0f, 0.0f, 0.0f, 6.0f, 0.0f, 1.0f, 6.0f, 0.0f, 1.0f, 7.0f, 0.0f,     //4º
            },
            //180
            {
                -2.0f, 10.0f, 0.0f, -2.0f, 9.0f, 0.0f, -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, -2.0f, 9.0f, 0.0f, -1.0f, 10.0f, 0.0f,    //1º
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f,       //2º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f,          //3º
                1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f, 2.0f, 10.0f, 0.0f, 2.0f, 9.0f, 0.0f, 1.0f, 9.0f, 0.0f, 2.0f, 10.0f, 0.0f,          //4º
            },
            //270
            {
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f,  //1º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f,     //2º
                0.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f,     //3º
                0.0f, 7.0f, 0.0f, 0.0f, 6.0f, 0.0f, 1.0f, 7.0f, 0.0f, 0.0f, 6.0f, 0.0f, 1.0f, 6.0f, 0.0f, 1.0f, 7.0f, 0.0f,     //4º
            }
        },
        // O - 96 || 120 || 144 || 168
        {   
            //0
            {
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f,   //1º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f,      //2º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f,      //3º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f,         //4º
            },
            //90
            {
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f,   //1º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f,      //2º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f,      //3º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f,         //4º
            },
            //180
            {
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f,   //1º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f,      //2º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f,      //3º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f,         //4º
            },
            //270
            {
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f,   //1º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f,      //2º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f,      //3º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f,         //4º
            }
        },
        // L - 192 || 216 || 240 || 264
        {   
            //0
            {
                -2.0f, 8.0f, 0.0f, -2.0f, 9.0f, 0.0f, -1.0f, 9.0f, 0.0f, -2.0f, 8.0f, 0.0f, -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f,   //1º
                -1.0f, 8.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,      //2º
                0.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,         //3º
                0.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,      //4º
            },
            //90
            {
                -1.0f, 9.0f, 0.0f, -1.0f, 10.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f,   //1º
                0.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f,      //2º
                0.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f,      //3º
                0.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f,         //4º
            },
            //180
            {
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,      //1º
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f,   //2º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,      //3º
                1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f, 2.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f, 2.0f, 10.0f, 0.0f, 2.0f, 9.0f, 0.0f,      //4º
            },
            //270
            {
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f,   //1º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f,      //2º
                -1.0f, 8.0f, 0.0f, -1.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f, -1.0f, 7.0f, 0.0f, 0.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f,      //3º
                0.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f,         //4º
            }
        },
        // J - 288 || 312 || 336 || 360
        {   
            //0
            {
                -2.0f, 10.0f, 0.0f, -2.0f, 9.0f, 0.0f, -1.0f, 10.0f, 0.0f, -2.0f, 9.0f, 0.0f, -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f,    //1º
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f,       //2º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,          //3º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,             //4º
            },
            //90
            {
                -1.0f, 8.0f, 0.0f, -1.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f, -1.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f,   //1º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,      //2º
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f,         //3º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,         //4º
            },
            //180
            {
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f,   //1º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,      //2º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,         //3º
                1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f, 2.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f, 2.0f, 9.0f, 0.0f, 2.0f, 8.0f, 0.0f,         //4º
            },
            //270
            {
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,  //1º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,     //2º
                0.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f, 1.0f, 7.0f, 0.0f,     //3º
                -1.0f, 8.0f, 0.0f, -1.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f, -1.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f,  //4º
            }
        },
        // Z - 384 || 408 || 432 || 456
        {   
            //0
            {
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f,   //1º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,      //2º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,         //3º
                1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f, 2.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f, 2.0f, 9.0f, 0.0f, 2.0f, 8.0f, 0.0f,         //4º
            },
            //90
            {
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,  //1º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,     //2º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,  //3º
                -1.0f, 8.0f, 0.0f, -1.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f, -1.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f,  //4º
            },
            //180
            {
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f,   //1º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,      //2º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,         //3º
                1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f, 2.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f, 2.0f, 9.0f, 0.0f, 2.0f, 8.0f, 0.0f,         //4º
            },
            //270
            {
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,  //1º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,     //2º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,  //3º
                -1.0f, 8.0f, 0.0f, -1.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f, -1.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f,  //4º
            }
        },
        // S - 480 || 504 || 528 || 552
        {   
            //0
            {
                1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f, 2.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f, 2.0f, 10.0f, 0.0f, 2.0f, 9.0f, 0.0f,  //1º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,  //2º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,     //3º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,  //4º
            },
            //90
            {
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f,   //1º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,      //2º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,         //3º
                0.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f, 1.0f, 7.0f, 0.0f,         //4º
            },
            //180
            {
                1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f, 2.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f, 2.0f, 10.0f, 0.0f, 2.0f, 9.0f, 0.0f,  //1º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,  //2º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,     //3º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,  //4º
            },
            //270
            {
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f,   //1º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,      //2º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,         //3º
                0.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f, 1.0f, 7.0f, 0.0f,         //4º
            }
        },
        // T - 576 || 600 || 624 || 648
        {   
            //0
            {
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,  //1º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,     //2º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,  //3º
                1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f, 2.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f, 2.0f, 9.0f, 0.0f, 2.0f, 8.0f, 0.0f,     //4º
            },
            //90
            {
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,  //1º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,     //2º
                0.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f, 1.0f, 8.0f, 0.0f, 1.0f, 7.0f, 0.0f,     //3º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,  //4º
            },
            //180
            {
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f,   //1º
                0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f, 1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f,      //2º
                1.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f, 2.0f, 10.0f, 0.0f, 1.0f, 9.0f, 0.0f, 2.0f, 10.0f, 0.0f, 2.0f, 9.0f, 0.0f,      //3º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,         //4º
            },
            //270
            {
                -1.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, -1.0f, 9.0f, 0.0f, 0.0f, 10.0f, 0.0f, 0.0f, 9.0f, 0.0f,   //1º
                -1.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, -1.0f, 8.0f, 0.0f, 0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f,      //2º
                -1.0f, 8.0f, 0.0f, -1.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f, -1.0f, 7.0f, 0.0f, 0.0f, 8.0f, 0.0f, 0.0f, 7.0f, 0.0f,         //3º
                0.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 0.0f, 8.0f, 0.0f, 1.0f, 9.0f, 0.0f, 1.0f, 8.0f, 0.0f,         //4º
            }
        }
    };

    static const GLfloat piece_color_buffer_data[7][4][4*6*3] = {
        // I
        {   
            //0
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //90
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //180
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //270
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            }
        },
        // O
        {   
            //0
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //90
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //180
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //270
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            }
        },
        // L
        {   
            //0
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //90
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //180
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //270
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            }
        },
        // J
        {   
            //0
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //90
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //180
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //270
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            }
        },
        // Z 
        {   
            //0
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //90
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //180
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //270
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            }
        },
        // S 
        {   
            //0
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //90
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //180
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //270
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            }
        },
        // T 
        {   
            //0
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //90
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //180
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            },
            //270
            {
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,    //1º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,       //2º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //3º
                1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,          //4º
            }
        }
    };

    // MENU
    static const GLfloat menu_vertex_buffer_data[] = {

        //TETRIS
        // T
        -11.5f, 18.0f, 0.0f, -11.5f, 17.0f, 0.0f, -8.5f, 18.0f, 0.0f, -11.5f, 17.0f, 0.0f, -8.5f, 18.0f, 0.0f, -8.5f, 17.0f, 0.0f,                                              // 6
        -10.5f, 17.0f, 0.0f, -10.5f, 13.0f, 0.0f, -9.5f, 17.0f, 0.0f, -10.5f, 13.0f, 0.0f, -9.5f, 17.0f, 0.0f, -9.5f, 13.0f, 0.0f,                                              // 12

        // E
        -7.5f, 18.0f, 0.0f, -7.5f, 13.0f, 0.0f, -6.5f, 18.0f, 0.0f, -7.5f, 13.0f, 0.0f, -6.5f, 18.0f, 0.0f, -6.5f, 13.0f, 0.0f,                                                 // 18
        -6.5f, 18.0f, 0.0f, -6.5f, 17.0f, 0.0f, -4.5f, 18.0f, 0.0f, -6.5f, 17.0f, 0.0f, -4.5f, 18.0f, 0.0f, -4.5f, 17.0f, 0.0f,                                                 // 24
        -6.5f, 16.0f, 0.0f, -6.5f, 15.0f, 0.0f, -5.5f, 16.0f, 0.0f, -6.5f, 15.0f, 0.0f, -5.5f, 16.0f, 0.0f, -5.5f, 15.0f, 0.0f,                                                 // 30
        -6.5f, 14.0f, 0.0f, -6.5f, 13.0f, 0.0f, -4.5f, 14.0f, 0.0f, -6.5f, 13.0f, 0.0f, -4.5f, 14.0f, 0.0f, -4.5f, 13.0f, 0.0f,                                                 // 36 

        // T
        -3.5f, 18.0f, 0.0f, -3.5f, 17.0f, 0.0f, -0.5f, 18.0f, 0.0f, -3.5f, 17.0f, 0.0f, -0.5f, 18.0f, 0.0f, -0.5f, 17.0f, 0.0f,                                                 // 42
        -2.5f, 17.0f, 0.0f, -2.5f, 13.0f, 0.0f, -1.5f, 17.0f, 0.0f, -2.5f, 13.0f, 0.0f, -1.5f, 17.0f, 0.0f, -1.5f, 13.0f, 0.0f,                                                 // 48

        // R
        0.5f, 18.0f, 0.0f, 0.5f, 13.0f, 0.0f, 1.5f, 18.0f, 0.0f, 0.5f, 13.0f, 0.0f, 1.5f, 18.0f, 0.0f, 1.5f, 13.0f, 0.0f,                                                       // 54
        1.5f, 18.0f, 0.0f, 1.5f, 17.0f, 0.0f, 2.5f, 18.0f, 0.0f, 1.5f, 17.0f, 0.0f, 2.5f, 18.0f, 0.0f, 2.5f, 17.0f, 0.0f,                                                       // 60
        2.5f, 18.0f, 0.0f, 2.5f, 15.0f, 0.0f, 3.5f, 18.0f, 0.0f,  2.5f, 15.0f, 0.0f, 3.5f, 18.0f, 0.0f, 3.5f, 15.0f, 0.0f,                                                      // 66
        1.5f, 16.0f, 0.0f, 1.5f, 15.0f, 0.0f, 2.5f, 16.0f, 0.0f, 1.5f, 15.0f, 0.0f, 2.5f, 16.0f, 0.0f, 2.5f, 15.0f, 0.0f,                                                       // 72
        2.0f, 15.0f, 0.0f, 2.0f, 14.0f, 0.0f, 3.0f, 15.0f, 0.0f, 2.0f, 14.0f, 0.0f, 3.0f, 15.0f, 0.0f, 3.0f, 14.0f, 0.0f,                                                       // 78
        2.5f, 14.0f, 0.0f, 2.5f, 13.0f, 0.0f, 3.5f, 14.0f, 0.0f, 2.5f, 13.0f, 0.0f, 3.5f, 14.0f, 0.0f, 3.5f, 13.0f, 0.0f,                                                       // 84

        // I
        4.5f, 14.0f, 0.0f, 4.5f, 13.0f, 0.0f, 7.5f, 14.0f, 0.0f, 4.5f, 13.0f, 0.0f, 7.5f, 14.0f, 0.0f, 7.5f, 13.0f, 0.0f,                                                       // 90
        5.5f, 18.0f, 0.0f, 5.5f, 13.0f, 0.0f, 6.5f, 18.0f, 0.0f, 5.5f, 13.0f, 0.0f, 6.5f, 18.0f, 0.0f, 6.5f, 13.0f, 0.0f,                                                       // 96
        4.5f, 18.0f, 0.0f, 4.5f, 17.0f, 0.0f, 7.5f, 18.0f, 0.0f, 4.5f, 17.0f, 0.0f, 7.5f, 18.0f, 0.0f, 7.5f, 17.0f, 0.0f,                                                       // 102

        // S
        8.5f, 18.0f, 0.0f, 8.5f, 17.0f, 0.0f, 11.5f, 18.0f, 0.0f, 8.5f, 17.0f, 0.0f, 11.5f, 18.0f, 0.0f, 11.5f, 17.0f, 0.0f,                                                    // 108
        8.5f, 17.0f, 0.0f, 8.5f, 16.0f, 0.0f, 9.5f, 17.0f, 0.0f, 8.5f, 16.0f, 0.0f, 9.5f, 17.0f, 0.0f, 9.5f, 16.0f, 0.0f,                                                       // 114
        8.5f, 16.0f, 0.0f, 8.5f, 15.0f, 0.0f, 11.5f, 16.0f, 0.0f, 8.5f, 15.0f, 0.0f, 11.5f, 16.0f, 0.0f, 11.5f, 15.0f, 0.0f,                                                    // 120
        10.5f, 15.0f, 0.0f, 10.5f, 14.0f, 0.0f, 11.5f, 15.0f, 0.0f, 10.5f, 14.0f, 0.0f, 11.5f, 15.0f, 0.0f, 11.5f, 14.0f, 0.0f,                                                 // 126
        8.5f, 14.0f, 0.0f, 8.5f, 13.0f, 0.0f, 11.5f, 14.0f, 0.0f, 8.5f, 13.0f, 0.0f, 11.5f, 14.0f, 0.0f, 11.5f, 13.0f, 0.0f,                                                    // 132

        // START
        // SQUARE
        -6.0f, 4.0f, 0.0f, -6.0f, 1.0f, 0.0f, 6.0f, 1.0f, 0.0f, 6.0f, 4.0f, 0.0f,                                                                                               // 136
        // S
        -2.5f, 3.5f, 0.0f, -3.5f, 3.5f, 0.0f, -3.5f, 2.5f, 0.0f, -2.5f, 2.5f, 0.0f, -2.5f, 1.5f, 0.0f, -3.5f, 1.5f, 0.0f,                                                       // 142
        // T
        -2.0f, 3.5f, 0.0f, -1.0f, 3.5f, 0.0f, -1.5f, 3.5f, 0.0f, -1.5f, 1.5f, 0.0f,                                                                                             // 146
        // A
        -0.5f, 1.5f, 0.0f, 0.0f, 3.5f, 0.0f, 0.5f, 1.5f, 0.0f, 0.3f, 2.25f, 0.0f, -0.3f, 2.25f, 0.0f,                                                                           // 151
        // R
        1.0f, 1.5f, 0.0f, 1.0f, 3.5f, 0.0f, 2.0f, 3.5f, 0.0f, 2.0f, 2.5f, 0.0f, 1.0f, 2.5f, 0.0f, 2.0f, 1.5f, 0.0f,                                                             // 157
        // T
        2.5f, 3.5f, 0.0f, 3.5f, 3.5f, 0.0f, 3.0f, 3.5f, 0.0f, 3.0f, 1.5f, 0.0f,                                                                                                 // 161

        // QUIT
        // SQUARE
        -6.0f, 0.0f, 0.0f, -6.0f, -3.0f, 0.0f, 6.0f, -3.0f, 0.0f, 6.0f, 0.0f, 0.0f,                                                                                             // 165 
        // Q
        -2.25f, -2.5f, 0.0f, -2.75f, -2.5f, 0.0f, -2.75f, -0.5f, 0.0f, -1.75f, -0.5f, 0.0f, -1.75f, -2.5f, 0.0f, -2.25f, -2.5f, 0.0f, -2.45f, -2.3f, 0.0f, -2.05f, -2.7f, 0.0f, // 173
        // U
        -1.25f, -0.5f, 0.0f, -1.25f, -2.5f, 0.0f, -0.25f, -2.5f, 0.0f, -0.25f, -0.5f, 0.0f,                                                                                     // 177
        // I
        0.25, -0.5f, 0.0f, 1.25f, -0.5f, 0.0f, 0.75f, -0.5f, 0.0f, 0.75f, -2.5f, 0.0f, 0.25, -2.5f, 0.0f, 1.25f, -2.5f, 0.0f,                                                   // 183
        // T
        1.75, -0.5f, 0.0f, 2.75f, -0.5f, 0.0f, 2.25f, -0.5f, 0.0f, 2.25f, -2.5f, 0.0f,                                                                                          // 187

    };

    static const GLfloat menu_color_buffer_data[] = {

        //TETRIS
        // T
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,

        // E
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,

        // T
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,

        // R
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,

        // I
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,

        // S
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,

        // START
        // SQUARE
        0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f,
        // S
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        // T
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        // A
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        // R
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        // T
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

        // QUIT
        // SQUARE
        0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f,
        // Q
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        // U
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        // I
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        // T
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
    };
    
    // MENU SELECT
    static const GLfloat menuSelect_vertex_buffer_data[] = {
        // START
        -5.25f, 2.0f, 0.0f, -4.25f, 2.5f, 0.0f, -5.25f, 3.0f, 0.0f, // 3
        5.25f, 2.0f, 0.0f, 4.25f, 2.5f, 0.0f, 5.25f, 3.0f, 0.0f,    // 6

        // QUIT
        -4.5f, -2.0f, 0.0f, -3.5f, -1.5f, 0.0f, -4.5f, -1.0f, 0.0f, // 9
        4.5f, -2.0f, 0.0f, 3.5f, -1.5f, 0.0f, 4.5f, -1.0f, 0.0f,    // 12
    };

    static const GLfloat menuSelect_color_buffer_data[] = {
        // START
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,   
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,   

        // QUIT
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,   
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,   
    };

    // MENU SELECT
    static const GLfloat numbers_vertex_buffer_data[] = {
        // 0 - 0
        9.0f, -7.0f, 0.0f, 9.0f, -13.0f, 0.0f, 10.0f, -7.0f, 0.0f, 9.0f, -13.0f, 0.0f, 10.0f, -7.0f, 0.0f, 10.0f, -13.0f, 0.0f,
        9.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -8.0f, 0.0f,
        12.0f, -7.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -7.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -13.0f, 0.0f,
        9.0f, -12.0f, 0.0f, 9.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 9.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 13.0f, -13.0f, 0.0f,

        // 1 - 24
        12.0f, -7.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -7.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -13.0f, 0.0f,

        // 2 - 30
        9.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -8.0f, 0.0f,
        12.0f, -8.0f, 0.0f, 12.0f, -10.0f, 0.0f, 13.0f, -8.0f, 0.0f, 12.0f, -10.0f, 0.0f, 13.0f, -8.0f, 0.0f, 13.0f, -10.0f, 0.0f,
        9.0f, -9.5f, 0.0f, 9.0f, -10.5f, 0.0f, 13.0f, -9.5f, 0.0f, 9.0f, -10.5f, 0.0f, 13.0f, -9.5f, 0.0f, 13.0f, -10.5f, 0.0f,
        9.0f, -10.0f, 0.0f, 9.0f, -13.0f, 0.0f, 10.0f, -10.0f, 0.0f, 9.0f, -13.0f, 0.0f, 10.0f, -10.0f, 0.0f, 10.0f, -13.0f, 0.0f,
        10.0f, -12.0f, 0.0f, 10.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 10.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 13.0f, -13.0f, 0.0f,

        //3 - 60
        9.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -8.0f, 0.0f,
        12.0f, -8.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -8.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -8.0f, 0.0f, 13.0f, -13.0f, 0.0f,
        9.0f, -12.0f, 0.0f, 9.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 9.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 13.0f, -13.0f, 0.0f,
        9.0f, -9.5f, 0.0f, 9.0f, -10.5f, 0.0f, 13.0f, -9.5f, 0.0f, 9.0f, -10.5f, 0.0f, 13.0f, -9.5f, 0.0f, 13.0f, -10.5f, 0.0f,

        // 4 - 84
        9.0f, -7.0f, 0.0f, 9.0f, -10.5f, 0.0f, 10.0f, -7.0f, 0.0f, 9.0f, -10.5f, 0.0f, 10.0f, -7.0f, 0.0f, 10.0f, -10.5f, 0.0f,
        12.0f, -7.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -7.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -13.0f, 0.0f,
        10.0f, -9.5f, 0.0f, 10.0f, -10.5f, 0.0f, 12.0f, -9.5f, 0.0f, 10.0f, -10.5f, 0.0f, 12.0f, -9.5f, 0.0f, 12.0f, -10.5f, 0.0f,

        // 5 - 102
        9.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -8.0f, 0.0f, //barra cima
        9.0f, -9.5f, 0.0f, 9.0f, -10.5f, 0.0f, 13.0f, -9.5f, 0.0f, 9.0f, -10.5f, 0.0f, 13.0f, -9.5f, 0.0f, 13.0f, -10.5f, 0.0f, //barra meio
        13.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 9.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 9.0f, -13.0f, 0.0f, 9.0f, -12.0f, 0.0f, //barra baixo
        9.0f, -10.5f, 0.0f, 10.0f, -10.5f, 0.0f, 9.0f, -7.0f, 0.0f, 10.0f, -10.5f, 0.0f, 9.0f, -7.0f, 0.0f, 10.0f, -7.0f, 0.0f, //barra esquerda
        12.0f, -9.5f, 0.0f, 13.0f, -9.5f, 0.0f, 13.0f, -13.0f, 0.0f, 12.0f, -9.5f, 0.0f, 13.0f, -13.0f, 0.0f, 12.0f, -13.0f, 0.0f,//barra direita

        // 6 - 132
        9.0f, -7.0f, 0.0f, 9.0f, -13.0f, 0.0f, 10.0f, -7.0f, 0.0f, 9.0f, -13.0f, 0.0f, 10.0f, -7.0f, 0.0f, 10.0f, -13.0f, 0.0f,
        9.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -8.0f, 0.0f,
        12.0f, -9.5f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -9.5f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -9.5f, 0.0f, 13.0f, -13.0f, 0.0f,
        9.0f, -12.0f, 0.0f, 9.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 9.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 13.0f, -13.0f, 0.0f,
        10.0f, -9.5f, 0.0f, 10.0f, -10.5f, 0.0f, 12.0f, -9.5f, 0.0f, 10.0f, -10.5f, 0.0f, 12.0f, -9.5f, 0.0f, 12.0f, -10.5f, 0.0f,

        // 7 - 162
        9.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -8.0f, 0.0f,
        12.0f, -7.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -7.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -13.0f, 0.0f,

        // 8 - 174
        9.0f, -7.0f, 0.0f, 9.0f, -13.0f, 0.0f, 10.0f, -7.0f, 0.0f, 9.0f, -13.0f, 0.0f, 10.0f, -7.0f, 0.0f, 10.0f, -13.0f, 0.0f,
        9.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -8.0f, 0.0f,
        12.0f, -7.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -7.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -13.0f, 0.0f,
        9.0f, -12.0f, 0.0f, 9.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 9.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 13.0f, -13.0f, 0.0f,
        10.0f, -9.5f, 0.0f, 10.0f, -10.5f, 0.0f, 12.0f, -9.5f, 0.0f, 10.0f, -10.5f, 0.0f, 12.0f, -9.5f, 0.0f, 12.0f, -10.5f, 0.0f,

        // 9 - 204
        9.0f, -7.0f, 0.0f, 9.0f, -10.5f, 0.0f, 10.0f, -7.0f, 0.0f, 9.0f, -10.5f, 0.0f, 10.0f, -7.0f, 0.0f, 10.0f, -10.5f, 0.0f,
        9.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 9.0f, -8.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -8.0f, 0.0f,
        12.0f, -7.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -7.0f, 0.0f, 12.0f, -13.0f, 0.0f, 13.0f, -7.0f, 0.0f, 13.0f, -13.0f, 0.0f,
        9.0f, -12.0f, 0.0f, 9.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 9.0f, -13.0f, 0.0f, 13.0f, -12.0f, 0.0f, 13.0f, -13.0f, 0.0f,
        10.0f, -9.5f, 0.0f, 10.0f, -10.5f, 0.0f, 12.0f, -9.5f, 0.0f, 10.0f, -10.5f, 0.0f, 12.0f, -9.5f, 0.0f, 12.0f, -10.5f, 0.0f,

    };

    static const GLfloat numbers_color_buffer_data[] = {
        // 0
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

        // 1
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

        // 2
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

        // 3
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

        // 4
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

        // 5
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

        // 6
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

        // 7
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

        // 8
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

        // 9
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
    };


    // TABULEIRO
    // VBO
    glGenBuffers(1, &vertexbuffer);
    glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(g_vertex_buffer_data), g_vertex_buffer_data, GL_STATIC_DRAW);
    // CBO
    glGenBuffers(1, &colorbuffer);
    glBindBuffer(GL_ARRAY_BUFFER, colorbuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(g_color_buffer_data), g_color_buffer_data, GL_STATIC_DRAW);

    // TABULEIRO
    // VBO
    glGenBuffers(1, &piece_vertexbuffer);
    glBindBuffer(GL_ARRAY_BUFFER, piece_vertexbuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(piece_vertex_buffer_data), piece_vertex_buffer_data, GL_STATIC_DRAW);
    // CBO
    glGenBuffers(1, &piece_colorbuffer);
    glBindBuffer(GL_ARRAY_BUFFER, piece_colorbuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(piece_color_buffer_data), piece_color_buffer_data, GL_STATIC_DRAW);

    // MENU
    // VBO
    glGenBuffers(1, &menu_vertexbuffer);
    glBindBuffer(GL_ARRAY_BUFFER, menu_vertexbuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(menu_vertex_buffer_data), menu_vertex_buffer_data, GL_STATIC_DRAW);
    // CBO
    glGenBuffers(1, &menu_colorbuffer);
    glBindBuffer(GL_ARRAY_BUFFER, menu_colorbuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(menu_color_buffer_data), menu_color_buffer_data, GL_STATIC_DRAW);

    // MENU SELECT
    // VBO
    glGenBuffers(1, &menuSelect_vertexbuffer);
    glBindBuffer(GL_ARRAY_BUFFER, menuSelect_vertexbuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(menuSelect_vertex_buffer_data), menuSelect_vertex_buffer_data, GL_STATIC_DRAW);
    // CBO
    glGenBuffers(1, &menuSelect_colorbuffer);
    glBindBuffer(GL_ARRAY_BUFFER, menuSelect_colorbuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(menuSelect_color_buffer_data), menuSelect_color_buffer_data, GL_STATIC_DRAW);
    
    // NUMBERS
    // VBO
    glGenBuffers(1, &numbers_vertexbuffer);
    glBindBuffer(GL_ARRAY_BUFFER, numbers_vertexbuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(numbers_vertex_buffer_data), numbers_vertex_buffer_data, GL_STATIC_DRAW);
    // CBO
    glGenBuffers(1, &numbers_colorbuffer);
    glBindBuffer(GL_ARRAY_BUFFER, numbers_colorbuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(numbers_color_buffer_data), numbers_color_buffer_data, GL_STATIC_DRAW);
}

//--------------------------------------------------------------------------------
void cleanupDataFromGPU()
{
    glDeleteBuffers(1, &vertexbuffer);
    glDeleteBuffers(1, &colorbuffer);
    glDeleteBuffers(1, &piece_vertexbuffer);
    glDeleteBuffers(1, &piece_colorbuffer);
    glDeleteBuffers(1, &menu_vertexbuffer);
    glDeleteBuffers(1, &menu_colorbuffer);
    glDeleteBuffers(1, &menuSelect_vertexbuffer);
    glDeleteBuffers(1, &menuSelect_colorbuffer);
    glDeleteBuffers(1, &numbers_vertexbuffer);
    glDeleteBuffers(1, &numbers_colorbuffer);
    glDeleteVertexArrays(1, &VertexArrayID);
    glDeleteProgram(programID);
}

//--------------------------------------------------------------------------------
void drawMenu(void) {

    // Clear the screen
    glClear( GL_COLOR_BUFFER_BIT );

    // Use our shader
    glUseProgram(programID);

    // create transformations
    glm::mat4 mvp = glm::ortho(-20.0f, 20.0f, -20.0f, 20.0f);

    // retrieve the matrix uniform locations
    unsigned int matrix = glGetUniformLocation(programID, "mvp");
    glUniformMatrix4fv(matrix, 1, GL_FALSE, &mvp[0][0]);

    glm::mat4 trans;
    trans = glm::translate(glm::mat4(1.0), glm::vec3(0.0f, 0.0f, 0.0f));
    unsigned int m = glGetUniformLocation(programID, "trans");
    glUniformMatrix4fv(m, 1, GL_FALSE, &trans[0][0]);


    // 1rst attribute buffer : vertices
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, menu_vertexbuffer);
    glVertexAttribPointer(
                          0,                  
                          3,                  
                          GL_FLOAT,           
                          GL_FALSE,           
                          0,                  
                          (void*)0            
                          );
    
    // 2nd attribute buffer : colors
    glEnableVertexAttribArray(1);
    glBindBuffer(GL_ARRAY_BUFFER, menu_colorbuffer);
    glVertexAttribPointer(
                          1,                                
                          3,                                
                          GL_FLOAT,                         
                          GL_FALSE,                         
                          0,                                
                          (void*)0                          
                          );

    glEnable(GL_PROGRAM_POINT_SIZE);
    glPointSize(5);

    //TETRIS
    glDrawArrays(GL_TRIANGLES, 0, 132);
    

    //START
    glDrawArrays(GL_LINE_LOOP, 132, 4);
    glDrawArrays(GL_LINE_STRIP, 136, 6); // S
    glDrawArrays(GL_LINE_STRIP, 142, 4); // T
    glDrawArrays(GL_LINE_STRIP, 146, 5); // A
    glDrawArrays(GL_LINE_STRIP, 151, 6); // R
    glDrawArrays(GL_LINE_STRIP, 157, 4); // T


    //QUIT
    glDrawArrays(GL_LINE_LOOP, 161, 4);
    glDrawArrays(GL_LINE_STRIP, 165, 8); // Q
    glDrawArrays(GL_LINE_STRIP, 173, 4); // U
    glDrawArrays(GL_LINE_STRIP, 177, 6); // I
    glDrawArrays(GL_LINE_STRIP, 183, 4); // T


    glDisableVertexAttribArray(0);
    glDisableVertexAttribArray(1);
}

void drawSelect(int id){

    // Use our shader
    glUseProgram(programID);

    // create transformations
    glm::mat4 mvp = glm::ortho(-20.0f, 20.0f, -20.0f, 20.0f);

    // retrieve the matrix uniform locations
    unsigned int matrix = glGetUniformLocation(programID, "mvp");
    glUniformMatrix4fv(matrix, 1, GL_FALSE, &mvp[0][0]);

    glm::mat4 trans;
    trans = glm::translate(glm::mat4(1.0), glm::vec3(0.0f, 0.0f, 0.0f));
    unsigned int m = glGetUniformLocation(programID, "trans");
    glUniformMatrix4fv(m, 1, GL_FALSE, &trans[0][0]);


    // 1rst attribute buffer : vertices
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, menuSelect_vertexbuffer);
    glVertexAttribPointer(
                          0,                  
                          3,                  
                          GL_FLOAT,           
                          GL_FALSE,           
                          0,                  
                          (void*)0            
                          );
    
    // 2nd attribute buffer : colors
    glEnableVertexAttribArray(1);
    glBindBuffer(GL_ARRAY_BUFFER, menuSelect_colorbuffer);
    glVertexAttribPointer(
                          1,                                
                          3,                                
                          GL_FLOAT,                         
                          GL_FALSE,                         
                          0,                                
                          (void*)0                          
                          );

    glEnable(GL_PROGRAM_POINT_SIZE);
    glPointSize(5);

    //TETRIS
    if(id == 0){
        // START
        glDrawArrays(GL_LINE_STRIP, 0, 3);
        glDrawArrays(GL_LINE_STRIP, 3, 3);
    }
    else{
        glDrawArrays(GL_LINE_STRIP, 6, 3);
        glDrawArrays(GL_LINE_STRIP, 9, 3);
    }

    glDisableVertexAttribArray(0);
    glDisableVertexAttribArray(1);
}

void drawTabuleiro(void) {

    // Clear the screen
    glClear( GL_COLOR_BUFFER_BIT );

    // Use our shader
    glUseProgram(programID);

    // create transformations
    glm::mat4 mvp = glm::ortho(-15.0f, 15.0f, -15.0f, 15.0f);

    // retrieve the matrix uniform locations
    unsigned int matrix = glGetUniformLocation(programID, "mvp");
    glUniformMatrix4fv(matrix, 1, GL_FALSE, &mvp[0][0]);

    glm::mat4 trans;
    trans = glm::translate(glm::mat4(1.0), glm::vec3(0.0f, 0.0f, 0.0f));
    unsigned int m = glGetUniformLocation(programID, "trans");
    glUniformMatrix4fv(m, 1, GL_FALSE, &trans[0][0]);


    // 1rst attribute buffer : vertices
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
    glVertexAttribPointer(
                          0,                  
                          3,                  
                          GL_FLOAT,           
                          GL_FALSE,           
                          0,                  
                          (void*)0            
                          );
    
    // 2nd attribute buffer : colors
    glEnableVertexAttribArray(1);
    glBindBuffer(GL_ARRAY_BUFFER, colorbuffer);
    glVertexAttribPointer(
                          1,                                
                          3,                                
                          GL_FLOAT,                         
                          GL_FALSE,                         
                          0,                                
                          (void*)0                          
                          );

    glEnable(GL_PROGRAM_POINT_SIZE);
    glPointSize(5);

    //tabuleiro
    glDrawArrays(GL_TRIANGLES, 0, 3);
    glDrawArrays(GL_TRIANGLES, 1, 3);

    glDrawArrays(GL_TRIANGLES, 4, 3);
    glDrawArrays(GL_TRIANGLES, 5, 3);

    glDrawArrays(GL_TRIANGLES, 8, 3);
    glDrawArrays(GL_TRIANGLES, 9, 3);

    glDrawArrays(GL_TRIANGLES, 12, 3);
    glDrawArrays(GL_TRIANGLES, 13, 3);

    glDrawArrays(GL_TRIANGLES, 16, 3);
    glDrawArrays(GL_TRIANGLES, 17, 3);

    // new_pieces
    // glLineWidth(100.0f);
    glDrawArrays(GL_LINE_LOOP, 20, 4);

    // hold
    glDrawArrays(GL_LINE_LOOP, 34, 4);

    printText2D("NEXT", 500, 520, 30);
    printText2D("HOLD", 500, 340, 30);

    if(!startGame && !menu)
        printText2D("GAME OVER", 99, 520, 38);

    glDisableVertexAttribArray(0);
    glDisableVertexAttribArray(1);
}

void drawNextPiece(int id, int orientation) { 

    // Use our shader
    glUseProgram(programID);

    // create transformations
    glm::mat4 mvp = glm::ortho(-15.0f, 15.0f, -15.0f, 15.0f);

    // retrieve the matrix uniform locations
    unsigned int matrix = glGetUniformLocation(programID, "mvp");
    glUniformMatrix4fv(matrix, 1, GL_FALSE, &mvp[0][0]);

    glm::mat4 trans;
    trans = glm::translate(glm::mat4(1.0), glm::vec3(8.0f, -1.0f, 0.0f));
    unsigned int m = glGetUniformLocation(programID, "trans");
    glUniformMatrix4fv(m, 1, GL_FALSE, &trans[0][0]);


    // 1rst attribute buffer : vertices
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, piece_vertexbuffer);
    glVertexAttribPointer(
                          0,                  
                          3,                  
                          GL_FLOAT,           
                          GL_FALSE,           
                          0,                  
                          (void*)0            
                          );
    
    // 2nd attribute buffer : colors
    glEnableVertexAttribArray(1);
    glBindBuffer(GL_ARRAY_BUFFER, piece_colorbuffer);
    glVertexAttribPointer(
                          1,                                
                          3,                                
                          GL_FLOAT,                         
                          GL_FALSE,                         
                          0,                                
                          (void*)0                          
                          );

    glEnable(GL_PROGRAM_POINT_SIZE);
    glPointSize(5);

    switch(id){

        case 0:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 0, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 24, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 48, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 72, 24);
                break;

            }
        break;

        case 1:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 96, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 120, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 144, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 168, 24);
                break;

            }
        break;

        case 2:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 192, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 216, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 240, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 264, 24);
                break;

            }
        break;

        case 3:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 288, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 312, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 336, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 360, 24);
                break;

            }
        break;

        case 4:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 384, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 408, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 432, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 456, 24);
                break;

            }
        break;

        case 5:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 480, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 504, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 528, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 552, 24);
                break;

            }
        break;

        case 6:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 576, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 600, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 624, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 648, 24);
                break;

            }
        break;
    };

    glDisableVertexAttribArray(0);
    glDisableVertexAttribArray(1);
}

void drawHoldPiece(int id, int orientation) { 

    // Use our shader
    glUseProgram(programID);

    // create transformations
    glm::mat4 mvp = glm::ortho(-15.0f, 15.0f, -15.0f, 15.0f);

    // retrieve the matrix uniform locations
    unsigned int matrix = glGetUniformLocation(programID, "mvp");
    glUniformMatrix4fv(matrix, 1, GL_FALSE, &mvp[0][0]);

    glm::mat4 trans;
    trans = glm::translate(glm::mat4(1.0), glm::vec3(8.0f, -10.0f, 0.0f));
    unsigned int m = glGetUniformLocation(programID, "trans");
    glUniformMatrix4fv(m, 1, GL_FALSE, &trans[0][0]);


    // 1rst attribute buffer : vertices
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, piece_vertexbuffer);
    glVertexAttribPointer(
                          0,                  
                          3,                  
                          GL_FLOAT,           
                          GL_FALSE,           
                          0,                  
                          (void*)0            
                          );
    
    // 2nd attribute buffer : colors
    glEnableVertexAttribArray(1);
    glBindBuffer(GL_ARRAY_BUFFER, piece_colorbuffer);
    glVertexAttribPointer(
                          1,                                
                          3,                                
                          GL_FLOAT,                         
                          GL_FALSE,                         
                          0,                                
                          (void*)0                          
                          );

    glEnable(GL_PROGRAM_POINT_SIZE);
    glPointSize(5);

    switch(id){

        case 0:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 0, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 24, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 48, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 72, 24);
                break;

            }
        break;

        case 1:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 96, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 120, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 144, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 168, 24);
                break;

            }
        break;

        case 2:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 192, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 216, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 240, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 264, 24);
                break;

            }
        break;

        case 3:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 288, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 312, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 336, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 360, 24);
                break;

            }
        break;

        case 4:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 384, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 408, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 432, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 456, 24);
                break;

            }
        break;

        case 5:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 480, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 504, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 528, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 552, 24);
                break;

            }
        break;

        case 6:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 576, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 600, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 624, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 648, 24);
                break;

            }
        break;
    };

    glDisableVertexAttribArray(0);
    glDisableVertexAttribArray(1);
}

void drawFallingPiece(int id, int orientation) { 

    // Use our shader
    glUseProgram(programID);

    // create transformations
    glm::mat4 mvp = glm::ortho(-15.0f, 15.0f, -15.0f, 15.0f);

    // retrieve the matrix uniform locations
    unsigned int matrix = glGetUniformLocation(programID, "mvp");
    glUniformMatrix4fv(matrix, 1, GL_FALSE, &mvp[0][0]);

    glm::mat4 trans;
    trans = glm::translate(glm::mat4(1.0), glm::vec3(pieceMX, pieceMY, 0.0f));
    unsigned int m = glGetUniformLocation(programID, "trans");
    glUniformMatrix4fv(m, 1, GL_FALSE, &trans[0][0]);


    // 1rst attribute buffer : vertices
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, piece_vertexbuffer);
    glVertexAttribPointer(
                          0,                  
                          3,                  
                          GL_FLOAT,           
                          GL_FALSE,           
                          0,                  
                          (void*)0            
                          );
    
    // 2nd attribute buffer : colors
    glEnableVertexAttribArray(1);
    glBindBuffer(GL_ARRAY_BUFFER, piece_colorbuffer);
    glVertexAttribPointer(
                          1,                                
                          3,                                
                          GL_FLOAT,                         
                          GL_FALSE,                         
                          0,                                
                          (void*)0                          
                          );

    glEnable(GL_PROGRAM_POINT_SIZE);
    glPointSize(5);

    switch(id){

        case 0:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 0, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 24, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 48, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 72, 24);
                break;

            }
        break;

        case 1:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 96, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 120, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 144, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 168, 24);
                break;

            }
        break;

        case 2:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 192, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 216, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 240, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 264, 24);
                break;

            }
        break;

        case 3:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 288, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 312, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 336, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 360, 24);
                break;

            }
        break;

        case 4:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 384, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 408, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 432, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 456, 24);
                break;

            }
        break;

        case 5:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 480, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 504, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 528, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 552, 24);
                break;

            }
        break;

        case 6:
            switch(orientation){

                case 0:
                    glDrawArrays(GL_TRIANGLES, 576, 24);
                break;

                case 1:
                    glDrawArrays(GL_TRIANGLES, 600, 24);
                break;

                case 2:
                    glDrawArrays(GL_TRIANGLES, 624, 24);
                break;

                case 3:
                    glDrawArrays(GL_TRIANGLES, 648, 24);
                break;

            }
        break;
    };

    glDisableVertexAttribArray(0);
    glDisableVertexAttribArray(1);
}

void drawBoardPieces(void) {

    // Use our shader
    glUseProgram(programID);

    // create transformations
    glm::mat4 mvp = glm::ortho(-15.0f, 15.0f, -15.0f, 15.0f);

    // retrieve the matrix uniform locations
    unsigned int matrix = glGetUniformLocation(programID, "mvp");
    glUniformMatrix4fv(matrix, 1, GL_FALSE, &mvp[0][0]);


    for(int y=0; y<20; y++){
        for(int x=0; x<10; x++){

            glm::mat4 trans;
            trans = glm::translate(glm::mat4(1.0), glm::vec3(-10.0f + (float)x, 10.0f - (float)y, 0.0f));
            unsigned int m = glGetUniformLocation(programID, "trans");
            glUniformMatrix4fv(m, 1, GL_FALSE, &trans[0][0]);


            // 1rst attribute buffer : vertices
            glEnableVertexAttribArray(0);
            glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
            glVertexAttribPointer(
                                0,                  
                                3,                  
                                GL_FLOAT,           
                                GL_FALSE,           
                                0,                  
                                (void*)0            
                                );
            
            // 2nd attribute buffer : colors
            glEnableVertexAttribArray(1);
            glBindBuffer(GL_ARRAY_BUFFER, colorbuffer);
            glVertexAttribPointer(
                                1,                                
                                3,                                
                                GL_FLOAT,                         
                                GL_FALSE,                         
                                0,                                
                                (void*)0                          
                                );

            glEnable(GL_PROGRAM_POINT_SIZE);
            glPointSize(5);

            if(tabuleiro[y][x] == 1){
                glDrawArrays(GL_TRIANGLES, 24, 6);
            }
                
        }
    }  

    glDisableVertexAttribArray(0);
    glDisableVertexAttribArray(1);
}

void drawPoints(int number, int numberOffset) {

    // Use our shader
    glUseProgram(programID);

    // create transformations
    glm::mat4 mvp = glm::ortho(-15.0f, 15.0f, -15.0f, 15.0f);

    // retrieve the matrix uniform locations
    unsigned int matrix = glGetUniformLocation(programID, "mvp");
    glUniformMatrix4fv(matrix, 1, GL_FALSE, &mvp[0][0]);

    glm::mat4 trans;
    trans = glm::translate(glm::mat4(1.0), glm::vec3(0.0f+numberOffset, 0.0f, 0.0f));
    unsigned int m = glGetUniformLocation(programID, "trans");
    glUniformMatrix4fv(m, 1, GL_FALSE, &trans[0][0]);


    // 1rst attribute buffer : vertices
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, numbers_vertexbuffer);
    glVertexAttribPointer(
                          0,                  
                          3,                  
                          GL_FLOAT,           
                          GL_FALSE,           
                          0,                  
                          (void*)0            
                          );
    
    // 2nd attribute buffer : colors
    glEnableVertexAttribArray(1);
    glBindBuffer(GL_ARRAY_BUFFER, numbers_colorbuffer);
    glVertexAttribPointer(
                          1,                                
                          3,                                
                          GL_FLOAT,                         
                          GL_FALSE,                         
                          0,                                
                          (void*)0                          
                          );

    glEnable(GL_PROGRAM_POINT_SIZE);
    glPointSize(5);

    switch(number){

        case 0:
            glDrawArrays(GL_TRIANGLES, 0, 24);
        break;

        case 1:
            glDrawArrays(GL_TRIANGLES, 24, 6);
        break;

        case 2:
            glDrawArrays(GL_TRIANGLES, 30, 30);
        break;

        case 3:
            glDrawArrays(GL_TRIANGLES, 60, 24);
        break;

        case 4:
            glDrawArrays(GL_TRIANGLES, 84, 18);
        break;

        case 5:
            glDrawArrays(GL_TRIANGLES, 102, 30);
        break;

        case 6:
            glDrawArrays(GL_TRIANGLES, 132, 30);
        break;

        case 7:
            glDrawArrays(GL_TRIANGLES, 162, 12);
        break;

        case 8:
            glDrawArrays(GL_TRIANGLES, 174, 30);
        break;

        case 9:
            glDrawArrays(GL_TRIANGLES, 204, 30);
        break;
    }

    glDisableVertexAttribArray(0);
    glDisableVertexAttribArray(1);

}

// AUXILIAR FUNCTIONS--------------------------------------------------------------------------------

void pos2BoardPos(int *x, int *y){
    *x = 10 + *x;
    *y = -(*y);
}

void dropBoard(int i){

    for(int y=i; y>0; y--){
        for(int x=0; x<10; x++){
            tabuleiro[y][x] = tabuleiro[y-1][x];
        }
    }

    for(int x=0; x<10; x++){
        tabuleiro[0][x] = 0;
    }

}

void resetGameBoard(){

    for(int y=0; y<20; y++)
        for(int x=0; x<10; x++)
            tabuleiro[y][x] = 0;

}

//--------------------------------------------------------------------------------
bool canBePlaced(int id, int orientation, int x, int y){
    
    pos2BoardPos(&x, &y);
    
    switch(id){

        case 0:// I
            switch(orientation){

                case 0:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y][x-2] == 0) && (tabuleiro[y][x+1] == 0) && (y<=19) && (x>=2) && (x<=8))
                        return true;
                break;

                case 1:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+2][x] == 0) && (tabuleiro[y+3][x] == 0) && (y<=16) && (x>=0) && (x<=9))
                        return true;
                break;

                case 2:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y][x-2] == 0) && (tabuleiro[y][x+1] == 0) && (y<=19) && (x>=2) && (x<=8))
                        return true;
                break;

                case 3:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+2][x] == 0) && (tabuleiro[y+3][x] == 0) && (y<=16) && (x>=0) && (x<=9))
                        return true;
                break;

            }
        break;

        case 1:// O
            switch(orientation){

                case 0:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+1][x] == 0) && (y<=18) && (x>=1) && (x<=9))
                        return true;
                break;

                case 1:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+1][x] == 0) && (y<=18) && (x>=1) && (x<=9))
                        return true;
                break;

                case 2:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+1][x] == 0) && (y<=18) && (x>=1) && (x<=9))
                        return true;
                break;

                case 3:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+1][x] == 0) && (y<=18) && (x>=1) && (x<=9))
                        return true;
                break;

            }
        break;

        case 2:// L
            switch(orientation){

                case 0:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+1][x-2]== 0) && (y<=18)  && (x>=2) && (x<=9))
                        return true;
                break;

                case 1:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+2][x] == 0) && (y<=17)  && (x>=1) && (x<=9))
                        return true;
                break;

                case 2:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y][x+1] == 0) && (y<=18)  && (x>=1) && (x<=8))
                        return true;
                break;

                case 3:
                    if((tabuleiro[y][x-1] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+2][x-1] == 0) && (tabuleiro[y+2][x] == 0) && (y<=17)  && (x>=1) && (x<=9))
                        return true;
                break;

            }
        break;

        case 3:// J
            switch(orientation){

                case 0:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y][x-2] == 0) && (y<=18)  && (x>=2) && (x<=9))
                        return true;
                break;

                case 1:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+2][x-1] == 0) && (y<=17)  && (x>=1) && (x<=9))
                        return true;
                break;

                case 2:
                    if((tabuleiro[y][x-1] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+1][x+1] == 0) && (y<=18)  && (x>=1) && (x<=8))
                        return true;
                break;

                case 3:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+2][x] == 0) && (tabuleiro[y+2][x-1] == 0) && (y<=17)  && (x>=1) && (x<=9))
                        return true;
                break;

            }
        break;

        case 4:// Z
            switch(orientation){

                case 0:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+1][x+1] == 0) && (y<=18)  && (x>=1) && (x<=8))
                        return true;
                break;

                case 1:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+2][x-1] == 0) && (y<=17) && (x>=1) && (x<=9))
                        return true;
                break;

                case 2:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+1][x+1] == 0) && (y<=18) && (x>=1) && (x<=8))
                        return true;
                break;

                case 3:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+2][x-1] == 0) && (y<=17) && (x>=1) && (x<=9))
                        return true;
                break;

            }
        break;

        case 5:// S
            switch(orientation){

                case 0:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x+1] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+1][x-1] == 0) && (y<=18) && (x>=1) && (x<=8))
                        return true;
                break;

                case 1:
                    if((tabuleiro[y][x-1] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+2][x] == 0) && (y<=17) && (x>=1) && (x<=9))
                        return true;
                break;

                case 2:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x+1] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+1][x-1] == 0) && (y<=18) && (x>=1) && (x<=8))
                        return true;
                break;

                case 3:
                    if((tabuleiro[y][x-1] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+2][x] == 0) && (y<=17) && (x>=1) && (x<=9))
                        return true;
                break;

            }
        break;

        case 6:// T
            switch(orientation){

                case 0:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+1][x+1] == 0) && (tabuleiro[y+1][x-1] == 0) && (y<=18) && (x>=1) && (x<=8))
                        return true;
                break;

                case 1:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y+1][x] == 0) && (tabuleiro[y+2][x] == 0) && (tabuleiro[y+1][x-1] == 0) && (y<=17) && (x>=1) && (x<=9))
                        return true;
                break;

                case 2:
                    if((tabuleiro[y][x] == 0) && (tabuleiro[y][x] == 0) && (tabuleiro[y][x+1] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x] == 0) && (y<=18) && (x>=1) && (x<=8))
                        return true;
                break;

                case 3:
                    if((tabuleiro[y][x-1] == 0) && (tabuleiro[y][x-1] == 0) && (tabuleiro[y+1][x-1] == 0) && (tabuleiro[y+2][x-1] == 0) && (tabuleiro[y+1][x] == 0) && (y<=17) && (x>=1) && (x<=9))
                        return true;
                break;

            }
        break;
    };

    return false;
}

void joinPieceToBoard(int id, int orientation, int x, int y){

    pos2BoardPos(&x, &y);
    
    switch(id){

        case 0:// I
            switch(orientation){

                case 0:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x+1] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y][x-2] = 1;
                break;

                case 1:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+2][x] = 1;
                    tabuleiro[y+3][x] = 1;
                break;

                case 2:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x+1] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y][x-2] = 1;
                break;

                case 3:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+2][x] = 1;
                    tabuleiro[y+3][x] = 1;
                break;

            }
        break;

        case 1:// O
            switch(orientation){

                case 0:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+1][x] = 1;
                break;

                case 1:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+1][x] = 1;
                break;

                case 2:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+1][x] = 1;
                break;

                case 3:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+1][x] = 1;
                break;

            }
        break;

        case 2:// L
            switch(orientation){

                case 0:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+1][x-2] = 1;
                break;

                case 1:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+2][x] = 1;
                break;

                case 2:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y][x+1] = 1;
                break;

                case 3:
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+2][x-1] = 1;
                    tabuleiro[y+2][x] = 1;
                break;

            }
        break;

        case 3:// J
            switch(orientation){

                case 0:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y][x-2] = 1;
                break;

                case 1:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+2][x-1] = 1;
                break;

                case 2:
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+1][x+1] = 1;
                break;

                case 3:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+2][x] = 1;
                    tabuleiro[y+2][x-1] = 1;
                break;

            }
        break;

        case 4:// Z
            switch(orientation){

                case 0:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+1][x+1] = 1;
                break;

                case 1:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+2][x-1] = 1;
                break;

                case 2:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+1][x+1] = 1;
                break;

                case 3:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+2][x-1] = 1;
                break;

            }
        break;

        case 5:// S
            switch(orientation){

                case 0:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x+1] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+1][x-1] = 1;
                break;

                case 1:
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+2][x] = 1;
                break;

                case 2:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x+1] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+1][x-1] = 1;
                break;

                case 3:
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+2][x] = 1;
                break;

            }
        break;

        case 6:// T
            switch(orientation){

                case 0:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+1][x+1] = 1;
                    tabuleiro[y+1][x-1] = 1;
                break;

                case 1:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y+1][x] = 1;
                    tabuleiro[y+2][x] = 1;
                    tabuleiro[y+1][x-1] = 1;
                break;

                case 2:
                    tabuleiro[y][x] = 1;
                    tabuleiro[y][x+1] = 1;
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x] = 1;
                break;

                case 3:
                    tabuleiro[y][x-1] = 1;
                    tabuleiro[y+1][x-1] = 1;
                    tabuleiro[y+2][x-1] = 1;
                    tabuleiro[y+1][x] = 1;
                break;

            }
        break;
    };

}

void lookForRow(){

    for(int y=19; y>=0; y--){

        bool aux = true;

        for(int x=0; x<10; x++){
            if(tabuleiro[y][x] == 0){
                aux = false;
            }
        }

        if(aux){
            points++;
            dropBoard(y);
            aux = false;
            y++;
        }
    }
}

//--------------------------------------------------------------------------------
int generateRandomPiece(void){
    
    srand(time(NULL));

    return (rand() % 7); 
}

int generateOrientation(void){
    srand(time(NULL));

    return (rand() % 4);
}

//--------------------------------------------------------------------------------
void keyCallBack(GLFWwindow* window, int key, int scancode, int action, int mods){//TODO

    if(menu){

        if(((key == GLFW_KEY_UP) || (key == GLFW_KEY_DOWN)) && action == GLFW_PRESS){
            if(selectOption == 0)
                selectOption = 1;
            else
                selectOption = 0;
        }
        
        if(key == GLFW_KEY_ENTER && action == GLFW_PRESS){
            
            if(selectOption == 0){
                menu = false;
                startGame = true;
                nextID = generateRandomPiece();
                nextROT = generateOrientation();
                startTime = time(0);
            }
            else{
                continueGame = false;
            }
            
        }

    }
    else{

        if(startGame){
                if(key == GLFW_KEY_C && action == GLFW_PRESS){
                holdPiece = true;
            }

            if(key == GLFW_KEY_LEFT && action != GLFW_RELEASE){
                if(currentID != -1){
                    if(canBePlaced(currentID, currentROT, pieceMX-1, pieceMY))
                        pieceMX--;
                }
                
            }

            if(key == GLFW_KEY_RIGHT && action != GLFW_RELEASE){
                if(currentID != -1){
                    if(canBePlaced(currentID, currentROT, pieceMX+1, pieceMY))
                        pieceMX++;
                }
                
            }

            if(key == GLFW_KEY_DOWN && action != GLFW_RELEASE){
                if(currentID != -1){
                    if(canBePlaced(currentID, currentROT, pieceMX, pieceMY-1))
                        pieceMY--;
                }
                
            }

            if(key == GLFW_KEY_UP && action == GLFW_PRESS){
                
                if(currentID != -1){

                    if(currentROT == 3){
                        if(canBePlaced(currentID, 0, pieceMX, pieceMY))
                            currentROT = 0;
                    }
                    else{
                        if(canBePlaced(currentID, currentROT+1, pieceMX, pieceMY))
                            currentROT++;
                    }
                        
                }
                
            }
        }
        else{
            points = 0;
            holdID = -1;
            holdROT = -1;
            bool getPiece = true;
            
            if(key == GLFW_KEY_R && action == GLFW_PRESS){
                startGame = true;
                startTime = time(0);
                nextID = generateRandomPiece();
                nextROT = generateOrientation();
                resetGameBoard();
                
            }
            else if(key != GLFW_KEY_R && action == GLFW_PRESS){
                nextID = -1;
                nextROT = -1;
                menu = true;
            }
        }

        
    }        
}

//--------------------------------------------------------------------------------
int main( void )
{
    // Initialise GLFW
    glfwInit();
    
    glfwWindowHint(GLFW_SAMPLES, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // To make MacOS happy; should not be needed
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    
    // Open a window
    window = glfwCreateWindow( WindowWidth, WindowHeight, "TETRIS 2D", NULL, NULL);
    
    // Create window context
    glfwMakeContextCurrent(window);
    
    // Initialize GLEW
    glewExperimental = true; // Needed for core profile
    glewInit();
    
    // Ensure we can capture the escape key being pressed below
    glfwSetInputMode(window, GLFW_STICKY_KEYS, GL_TRUE);
    glfwSetKeyCallback(window, keyCallBack);

    // White background
    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
    
    // transfer my data (vertices, colors, and shaders) to GPU side
    transferDataToGPUMemory();     
    
    bool newPiece = true;
    bool getPiece = true;

    // render scene for each frame
    do{ 

        if(menu){
            drawMenu();

            drawSelect(selectOption);

            resetGameBoard();

        }
        else{

            // drawing callback
            drawTabuleiro();
            drawPoints(points%10,0);
            drawPoints(points%100/10,-5);
        
            if(startGame){
                if(nextID != -1){

                    if(getPiece){
                        currentID = nextID;
                        currentROT = nextROT;

                        getPiece = false;
                        newPiece = true;
                    }  

                    if(holdPiece){
                        
                        if (holdID != -1){

                            if(canBePlaced(holdID, holdROT, (int)pieceMX,(int)pieceMY)){
                                
                                int auxID = currentID, auxROT = currentROT;

                                currentID = holdID;
                                currentROT = holdROT;

                                holdID = auxID;
                                holdROT = auxROT;
                            }
                            
                        }
                        else{

                            if(canBePlaced(nextID, nextROT, (int)pieceMX,(int)pieceMY)){

                                holdID = currentID;
                                holdROT = currentROT;
                                
                                getPiece = true;
                            }                          
                        }    

                                            
                        holdPiece = false;   

                        printf("%d\t%d\n", holdID, holdROT);
                    }                

                    if(canBePlaced(currentID, currentROT, (int)pieceMX,(int)pieceMY)){

                        if(difftime(time(0), startTime) >= 1){
                            startTime = time(0);
                            pieceMY -= pieceStep;
                        }

                        if(canBePlaced(currentID, currentROT, (int)pieceMX,(int)pieceMY)){

                            drawFallingPiece(currentID, currentROT);   
                        }
                        else{

                            pieceMY += pieceStep;
                            
                            joinPieceToBoard(currentID, currentROT, (int)pieceMX,(int)pieceMY);

                            lookForRow();

                            pieceMX = -5.0f;
                            pieceMY = 0.0f;
                            getPiece = true;
                        }
                        
                    }
                    else{
                        startGame = false;
                    }                      
                     
                }

                
            }

            drawBoardPieces(); 

            if (newPiece){
                newPiece = false;
                nextID = generateRandomPiece();
                nextROT = generateOrientation();
            }
        }

        

        drawNextPiece(nextID, nextROT);

        if (holdID != -1) {
            drawHoldPiece(holdID, holdROT);
        }
        

        // Swap buffers
        glfwSwapBuffers(window);
        
        // looking for events
        glfwPollEvents();

        if(continueGame)
            continueGame = ( glfwGetKey(window, GLFW_KEY_ESCAPE ) != GLFW_PRESS && glfwWindowShouldClose(window) == 0 );
                   
    } // Check if the ESC key was pressed or the window was closed
    while(continueGame);
    
    
    // Cleanup VAO, VBOs, and shaders from GPU
    cleanupDataFromGPU();
    
    // Close OpenGL window and terminate GLFW
    glfwTerminate();
    
    return 0;
}
